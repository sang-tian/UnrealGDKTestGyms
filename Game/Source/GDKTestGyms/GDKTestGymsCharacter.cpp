// Copyright (c) Improbable Worlds Ltd, All Rights Reserved

#include "GDKTestGymsCharacter.h"

#include "EngineUtils.h"
#include "GDKTestGymsNPC.h"
#include "Camera/CameraComponent.h"
#include "Components/CapsuleComponent.h"
#include "Components/InputComponent.h"
#include "Engine/World.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "GameFramework/Controller.h"
#include "GameFramework/SpringArmComponent.h"
#include "Kismet/GameplayStatics.h"
#include "SpatialNetDriver.h"
#include "SpatialStatics.h"
#include "SpatialPackageMapClient.h"

#include "UnrealNetwork.h"

static const std::string base64_chars = 
             "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
             "abcdefghijklmnopqrstuvwxyz"
             "0123456789+/";


static inline bool is_base64(unsigned char c) {
  return (isalnum(c) || (c == '+') || (c == '/'));
}

std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len) {
  std::string ret;
  int i = 0;
  int j = 0;
  unsigned char char_array_3[3];
  unsigned char char_array_4[4];

  while (in_len--) {
    char_array_3[i++] = *(bytes_to_encode++);
    if (i == 3) {
      char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
      char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
      char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
      char_array_4[3] = char_array_3[2] & 0x3f;

      for(i = 0; (i <4) ; i++)
        ret += base64_chars[char_array_4[i]];
      i = 0;
    }
  }

  if (i)
  {
    for(j = i; j < 3; j++)
      char_array_3[j] = '\0';

    char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
    char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
    char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
    char_array_4[3] = char_array_3[2] & 0x3f;

    for (j = 0; (j < i + 1); j++)
      ret += base64_chars[char_array_4[j]];

    while((i++ < 3))
      ret += '=';

  }

  return ret;

}
std::string base64_decode(std::string const& encoded_string) {
  int in_len = encoded_string.size();
  int i = 0;
  int j = 0;
  int in_ = 0;
  unsigned char char_array_4[4], char_array_3[3];
  std::string ret;

  while (in_len-- && ( encoded_string[in_] != '=') && is_base64(encoded_string[in_])) {
    char_array_4[i++] = encoded_string[in_]; in_++;
    if (i ==4) {
      for (i = 0; i <4; i++)
        char_array_4[i] = base64_chars.find(char_array_4[i]);

      char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
      char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
      char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];

      for (i = 0; (i < 3); i++)
        ret += char_array_3[i];
      i = 0;
    }
  }

  if (i) {
    for (j = i; j <4; j++)
      char_array_4[j] = 0;

    for (j = 0; j <4; j++)
      char_array_4[j] = base64_chars.find(char_array_4[j]);

    char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
    char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
    char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];

    for (j = 0; (j < i - 1); j++) ret += char_array_3[j];
  }

  return ret;
}

//////////////////////////////////////////////////////////////////////////
// AGDKTestGymsCharacter

AGDKTestGymsCharacter::AGDKTestGymsCharacter(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
{
	PrimaryActorTick.bCanEverTick = true;
	
	// Set size for collision capsule
	GetCapsuleComponent()->InitCapsuleSize(42.f, 96.0f);

	// set our turn rates for input
	BaseTurnRate = 45.f;
	BaseLookUpRate = 45.f;

	// Don't rotate when the controller rotates. Let that just affect the camera.
	bUseControllerRotationPitch = false;
	bUseControllerRotationYaw = false;
	bUseControllerRotationRoll = false;

	// Configure character movement
	GetCharacterMovement()->bOrientRotationToMovement = true; // Character moves in the direction of input...	
	GetCharacterMovement()->RotationRate = FRotator(0.0f, 540.0f, 0.0f); // ...at this rotation rate
	GetCharacterMovement()->JumpZVelocity = 600.f;
	GetCharacterMovement()->AirControl = 0.2f;

	// Create a camera boom (pulls in towards the player if there is a collision)
	CameraBoom = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraBoom"));
	CameraBoom->SetupAttachment(RootComponent);
	CameraBoom->TargetArmLength = 300.0f; // The camera follows at this distance behind the character	
	CameraBoom->bUsePawnControlRotation = true; // Rotate the arm based on the controller

												// Create a follow camera
	FollowCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("FollowCamera"));
	FollowCamera->SetupAttachment(CameraBoom, USpringArmComponent::SocketName); // Attach the camera to the end of the boom and let the boom adjust to match the controller orientation
	FollowCamera->bUsePawnControlRotation = false; // Camera does not rotate relative to arm

	// Note: The skeletal mesh and anim blueprint references on the Mesh component (inherited from Character) 
	// are set in the derived blueprint asset named MyCharacter (to avoid direct content references in C++)

	NextBackgroundUpdateTime = 0.0f;
	NextTrainOutput = 0.0f;

	auto TrainingDataBase64 = "gAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAgAKTCQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQABAAAAAAABAAAAAAAAAAAAA"
"IBAvxuZIbIMnAKrAkMKJSTxAQ4EAQMFCAECBwIDAQIpB7sB1wEABgMBsQEdTAcBBwMEBAAMBgUIDwANAAIAHzgBBQAAHgEABAAABQENAAIBAAABCwECAAgAAAUAAAAAHgACFAgAABQCAAECAwECAQEAAQkCAAEBOAEADAIABxkABhcIAwcBGgAVAwJPAEYDCQEBAAAHAQACAAEABgIHAgAPAAoIeAELAAAEBQAIBQ8CAQBOAgQABAQEAQAAAAAAAAIAAAEAAAgAEQAAAAAAAQABAAAAAQAAABYAEAADAAEBAAIAAAAAAAAAAgAAAAAAAAA0LAAAQgAAAAABAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAwEEAAAAAAAAAAAAAgIAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEODMJAQABNwAAAAAAAAABAAAAAAAAAAAEAAAAAAAAAAAAAAAAAQEAAQAAAAACAAAAAAAAAAAAAAEBAAAAAQIBAAAAAAEAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOAAAAAAAAAAAAAETAAA7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAEAAAEAAAAAAAAAAAAAAAAAA"
"QAAAAAAAQAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAEAAAAAAAEAAgAAAAAAAAAAGAAAAAAABAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA4JAAAAAAAAAAAAAAAAAAIBAAAAAAEAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAwAAAAAAAAAAAAAAAAABAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"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";

	auto TrainingData = base64_decode(TrainingDataBase64);
	Encoder.LoadTrainingData(BackgroundEncoder::TrainingData::Deserialise({TrainingData.data(), TrainingData.data() + TrainingData.size()}));
}

void AGDKTestGymsCharacter::BeginPlay()
{
	Super::BeginPlay();
	// this->SetReplicateMovement(false);
	// ServerShouldReplicateFRepMovement = false;
}

//////////////////////////////////////////////////////////////////////////
// Input

void AGDKTestGymsCharacter::SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)
{
	// Set up gameplay key bindings
	check(PlayerInputComponent);
	PlayerInputComponent->BindAction("Jump", IE_Pressed, this, &ACharacter::Jump);
	PlayerInputComponent->BindAction("Jump", IE_Released, this, &ACharacter::StopJumping);

	PlayerInputComponent->BindAxis("MoveForward", this, &AGDKTestGymsCharacter::MoveForward);
	PlayerInputComponent->BindAxis("MoveRight", this, &AGDKTestGymsCharacter::MoveRight);

	// We have 2 versions of the rotation bindings to handle different kinds of devices differently
	// "turn" handles devices that provide an absolute delta, such as a mouse.
	// "turnrate" is for devices that we choose to treat as a rate of change, such as an analog joystick
	PlayerInputComponent->BindAxis("Turn", this, &APawn::AddControllerYawInput);
	PlayerInputComponent->BindAxis("TurnRate", this, &AGDKTestGymsCharacter::TurnAtRate);
	PlayerInputComponent->BindAxis("LookUp", this, &APawn::AddControllerPitchInput);
	PlayerInputComponent->BindAxis("LookUpRate", this, &AGDKTestGymsCharacter::LookUpAtRate);

	// handle touch devices
	PlayerInputComponent->BindTouch(IE_Pressed, this, &AGDKTestGymsCharacter::TouchStarted);
	PlayerInputComponent->BindTouch(IE_Released, this, &AGDKTestGymsCharacter::TouchStopped);
}

void AGDKTestGymsCharacter::Tick(float DeltaSeconds)
{
	Super::Tick(DeltaSeconds);

	if(HasAuthority() && GetWorld()->GetRealTimeSeconds() >= NextBackgroundUpdateTime)
	{
		NextBackgroundUpdateTime = GetWorld()->GetRealTimeSeconds() + 0.1f;

		constexpr float NetCullRadius = 2 * 7500.0f;
		
		BackgroundEncoder::Values Values;
		for (TActorIterator<ACharacter> ActorItr(GetWorld()); ActorItr; ++ActorItr)
		{
			if(!ActorItr->IsA(StaticClass()) && !ActorItr->IsA(AGDKTestGymsNPC::StaticClass()))
			{
				continue;
			}

			auto EntityId = USpatialStatics::GetActorEntityId(*ActorItr);
			if(EntityId == 0)
			{
				continue;
			}
			
			auto DistanceFromPlayer = FVector::DistSquared(GetActorLocation(), ActorItr->GetActorLocation());
			if(DistanceFromPlayer < NetCullRadius * NetCullRadius)
			{
				Values.clear();
				Values.resize(7);
				
				auto Position = ActorItr->GetActorLocation();
				Values[0] = static_cast<uint64>(10000.0f + Position.X);
				Values[1] = static_cast<uint64>(10000.0f + Position.Y);
				Values[2] = static_cast<uint64>(10000.0f + Position.Z);
				auto Velocity = ActorItr->GetVelocity();
				Values[3] = static_cast<uint64>(10000.0f + Velocity.X);
				Values[4] = static_cast<uint64>(10000.0f + Velocity.Y);
				Values[5] = static_cast<uint64>(10000.0f + Velocity.Z);
				Values[6] = static_cast<uint64>(10000.0f + ActorItr->GetActorRotation().Yaw);
				Encoder.UpdateEntity(EntityId, Values);
			}else
			{
				Encoder.DeleteEntity(EntityId);
			}
		}

		auto Delta = Encoder.FlushNetworkDelta();
		TArray<uint8> UnrealDelta{Delta.data(), static_cast<int>(Delta.size())};
		OnNetworkDelta(UnrealDelta);

		UE_LOG(LogTemp, Error, TEXT("SERVER SEND %d"), UnrealDelta.Num());

		if(GetWorld()->GetRealTimeSeconds() >= NextTrainOutput)
		{
			NextTrainOutput = GetWorld()->GetRealTimeSeconds() + 30.0f;

			auto TrainingData = Encoder.GetTrainingData().Serialise();
			auto Base64TrainingData = base64_encode(TrainingData.data(), TrainingData.size());
			UE_LOG(LogTemp, Error, TEXT("Training data: %s"), UTF8_TO_TCHAR(Base64TrainingData.c_str()));
		}
	}
}

void AGDKTestGymsCharacter::PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker)
{
	SetReplicateMovement(false);
	Super::PreReplication(ChangedPropertyTracker);
	SetReplicateMovement(true);
}

void AGDKTestGymsCharacter::OnNetworkDelta_Implementation(const TArray<uint8>& NetworkDelta)
{
	// UE_LOG(LogTemp, Error, TEXT("CLIENT RECEIVE %d"), NetworkDelta.Num());

	Encoder.ApplyNetworkDelta({NetworkDelta.GetData(), NetworkDelta.GetData() + NetworkDelta.Num()});
	
	auto EntityIds = Encoder.GetEntityIds();
	for(auto EntityId : EntityIds)
	{
		if (const USpatialNetDriver* SpatialNetDriver = Cast<USpatialNetDriver>(GetNetDriver()))
		{
			auto Actor = SpatialNetDriver->PackageMap->GetObjectFromEntityId(EntityId);
			if(!Actor.IsValid() || !Actor->IsA(APawn::StaticClass()))
			{
				continue;
			}

			auto* Character = Cast<ACharacter>(Actor.Get());
			
			const auto& Values = *Encoder.GetEntityValues(EntityId);
			FVector Position{};
			Position.X = static_cast<float>(Values[0]) - 10000.0f;
			Position.Y = static_cast<float>(Values[1]) - 10000.0f;
			Position.Z = static_cast<float>(Values[2]) - 10000.0f;
			FVector Velocity{};
			Velocity.X = static_cast<float>(Values[3]) - 10000.0f;
			Velocity.Y = static_cast<float>(Values[4]) - 10000.0f;
			Velocity.Z = static_cast<float>(Values[5]) - 10000.0f;
			FRotator Rotation(0, static_cast<float>(Values[6]) - 10000.0f, 0);

			FRepMovement Movement = Character->GetReplicatedMovement();
			Movement.LinearVelocity = Velocity;
			Movement.Location = Position;
			Movement.Rotation = Rotation;
			Movement.AngularVelocity = FVector::ZeroVector;
			Movement.bSimulatedPhysicSleep = false;
			Movement.bRepPhysics = false;
			Character->SetReplicatedMovement(Movement);
			Character->PostNetReceiveLocationAndRotation();
			
			if(Character != this)
			{
				Character->GetCharacterMovement()->Velocity = Velocity;
			}
		}
	}	
}

void AGDKTestGymsCharacter::TouchStarted(ETouchIndex::Type FingerIndex, FVector Location)
{
	Jump();
}

void AGDKTestGymsCharacter::TouchStopped(ETouchIndex::Type FingerIndex, FVector Location)
{
	StopJumping();
}

void AGDKTestGymsCharacter::TurnAtRate(float Rate)
{
	// calculate delta for this frame from the rate information
	AddControllerYawInput(Rate * BaseTurnRate * GetWorld()->GetDeltaSeconds());
}

void AGDKTestGymsCharacter::LookUpAtRate(float Rate)
{
	// calculate delta for this frame from the rate information
	AddControllerPitchInput(Rate * BaseLookUpRate * GetWorld()->GetDeltaSeconds());
}

void AGDKTestGymsCharacter::MoveForward(float Value)
{
	if ((Controller != NULL) && (Value != 0.0f))
	{
		// find out which way is forward
		const FRotator Rotation = Controller->GetControlRotation();
		const FRotator YawRotation(0, Rotation.Yaw, 0);

		// get forward vector
		const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);
		AddMovementInput(Direction, Value);
	}
}

void AGDKTestGymsCharacter::MoveRight(float Value)
{
	if ((Controller != NULL) && (Value != 0.0f))
	{
		// find out which way is right
		const FRotator Rotation = Controller->GetControlRotation();
		const FRotator YawRotation(0, Rotation.Yaw, 0);

		// get right vector 
		const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);
		// add movement in that direction
		AddMovementInput(Direction, Value);
	}
}
